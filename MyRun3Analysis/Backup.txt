O2Physics code style refuse unused commented code,
So I back up some lines here for FlowPbPbTask.cxx


    // registry.add("c22", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("c32", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("c42", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("c24", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("c26", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("c22_gap04", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("c22_gap06", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("c22_gap08", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("c22_gap10", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("c32_gap04", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("c32_gap06", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("c32_gap08", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("c32_gap10", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("c42_gap04", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("c42_gap06", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("c42_gap08", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("c42_gap10", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("c422", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("c422_gapA04", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("c422_gapB04", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("c422_gapA10", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("c422_gapB10", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("c3232", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("c4242", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("c3232_gap04", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("c4242_gap04", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("c24_gap04", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("c3232_gap10", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("c4242_gap10", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("c24_gap10", "", {HistType::kTProfile, {axisMultiplicity}});

    // registry.add("BootstrapContainer00/hMeanPtWithinGap08", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("BootstrapContainer00/c22_gap08_Weff", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("BootstrapContainer00/c22_gap08_trackMeanPt", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("BootstrapContainer00/PtVariance_partA_WithinGap08", "", {HistType::kTProfile, {axisMultiplicity}});
    // registry.add("BootstrapContainer00/PtVariance_partB_WithinGap08", "", {HistType::kTProfile, {axisMultiplicity}});

    // for (int i = 1; i < 10; i++) {
    //   registry.addClone("BootstrapContainer00/", Form("BootstrapContainer0%d/", i));
    // }

打印子文件夹结构
    TIter next(registry.getListOfHistograms());
    // place lists always at the top
    for(int i=0;i<cfgNbootstrap;i++){
      TObject *obj = next();
      Printf("%d: %s", i, obj->GetName());
      TIter IterSubDir((TList*)obj);
      while(TObject *objsub = IterSubDir()){
        Printf("    %s", objsub->GetName());
      }
    }

        // TIter next(registry.getListOfHistograms());
    // // place lists always at the top -- HistogramRegistry.cxx
    // for(int i=0;i<cfgNbootstrap;i++){
    //   // TList* BootstrapSubDir = static_cast<TList*>(next());
    //   // Printf("%d: %s", i, BootstrapSubDir->GetName());
    //   // BootstrapArray[i][0] = static_cast<TProfile*>(BootstrapSubDir->Get("hMeanPtWithinGap08"));
    //   // BootstrapArray[i][1] = static_cast<TProfile*>(BootstrapSubDir->Get("c22_gap08_Weff"));
    //   // BootstrapArray[i][2] = static_cast<TProfile*>(BootstrapSubDir->Get("c22_gap08_trackMeanPt"));
    //   // BootstrapArray[i][3] = static_cast<TProfile*>(BootstrapSubDir->Get("PtVariance_partA_WithinGap08"));
    //   // BootstrapArray[i][4] = static_cast<TProfile*>(BootstrapSubDir->Get("PtVariance_partB_WithinGap08"));
    //   // for(int j=0;j<5;j++){
    //   //   Printf("    %s", BootstrapArray[i][j]->GetName());
    //   // }
    //   TObject *BootstrapSubDir = next();
    //   Printf("%d: %s", i, BootstrapSubDir->GetName());
    //   TIter IterSubDir(static_cast<TList*>(BootstrapSubDir));
    //   while(TObject *objsub = IterSubDir()){
    //     Printf("    %s", objsub->GetName());
    //   }
    // }


      template <char... chars, char... chars2>
    void FillpTvnProfile(const GFW::CorrConfig& corrconf, const double& sum_pt, const double& WeffEvent, const ConstStr<chars...>& vnWeff, const ConstStr<chars2...>& vnpT, const double& cent)
    {
      double meanPt = sum_pt / WeffEvent;
      double dnx, val;
      dnx = fGFW->Calculate(corrconf, 0, kTRUE).real();
      if (dnx == 0)
        return;
      if (!corrconf.pTDif) {
        val = fGFW->Calculate(corrconf, 0, kFALSE).real() / dnx;
        if (TMath::Abs(val) < 1) {
          registry.fill(vnWeff, cent, val, dnx * WeffEvent);
          registry.fill(vnpT, cent, val * meanPt, dnx * WeffEvent);
        }
        return;
      }
      return;
    }

    // Filling c22 with ROOT TProfile
    // FillProfile(corrconfigs.at(0), HIST("c22"), cent);
    // FillProfile(corrconfigs.at(1), HIST("c32"), cent);
    // FillProfile(corrconfigs.at(2), HIST("c42"), cent);
    // FillProfile(corrconfigs.at(3), HIST("c24"), cent);
    // FillProfile(corrconfigs.at(4), HIST("c26"), cent);
    // FillProfile(corrconfigs.at(5), HIST("c22_gap04"), cent);
    // FillProfile(corrconfigs.at(6), HIST("c22_gap06"), cent);
    // FillProfile(corrconfigs.at(7), HIST("c22_gap08"), cent);
    // FillProfile(corrconfigs.at(8), HIST("c22_gap10"), cent);
    // FillProfile(corrconfigs.at(11), HIST("c422"), cent);
    // FillProfile(corrconfigs.at(12), HIST("c422_gapA04"), cent);
    // FillProfile(corrconfigs.at(13), HIST("c422_gapB04"), cent);
    // FillProfile(corrconfigs.at(kkk), HIST("c24_gap04"), cent);


        // // Filling Bootstrap samples
    // int SampleIndex = static_cast<int>(cfgNbootstrap * l_Random);
    // if (SampleIndex == 0)
    //   FillBootstrap<0>(cent, ptSum_Gap08, weffEvent_WithinGap08, sum_pt_wSquare_WithinGap08, sum_ptSquare_wSquare_WithinGap08, WeffEvent_diff_WithGap08);
    // else if (SampleIndex == 1)
    //   FillBootstrap<1>(cent, ptSum_Gap08, weffEvent_WithinGap08, sum_pt_wSquare_WithinGap08, sum_ptSquare_wSquare_WithinGap08, WeffEvent_diff_WithGap08);
    // else if (SampleIndex == 2)
    //   FillBootstrap<2>(cent, ptSum_Gap08, weffEvent_WithinGap08, sum_pt_wSquare_WithinGap08, sum_ptSquare_wSquare_WithinGap08, WeffEvent_diff_WithGap08);
    // else if (SampleIndex == 3)
    //   FillBootstrap<3>(cent, ptSum_Gap08, weffEvent_WithinGap08, sum_pt_wSquare_WithinGap08, sum_ptSquare_wSquare_WithinGap08, WeffEvent_diff_WithGap08);
    // else if (SampleIndex == 4)
    //   FillBootstrap<4>(cent, ptSum_Gap08, weffEvent_WithinGap08, sum_pt_wSquare_WithinGap08, sum_ptSquare_wSquare_WithinGap08, WeffEvent_diff_WithGap08);
    // else if (SampleIndex == 5)
    //   FillBootstrap<5>(cent, ptSum_Gap08, weffEvent_WithinGap08, sum_pt_wSquare_WithinGap08, sum_ptSquare_wSquare_WithinGap08, WeffEvent_diff_WithGap08);
    // else if (SampleIndex == 6)
    //   FillBootstrap<6>(cent, ptSum_Gap08, weffEvent_WithinGap08, sum_pt_wSquare_WithinGap08, sum_ptSquare_wSquare_WithinGap08, WeffEvent_diff_WithGap08);
    // else if (SampleIndex == 7)
    //   FillBootstrap<7>(cent, ptSum_Gap08, weffEvent_WithinGap08, sum_pt_wSquare_WithinGap08, sum_ptSquare_wSquare_WithinGap08, WeffEvent_diff_WithGap08);
    // else if (SampleIndex == 8)
    //   FillBootstrap<8>(cent, ptSum_Gap08, weffEvent_WithinGap08, sum_pt_wSquare_WithinGap08, sum_ptSquare_wSquare_WithinGap08, WeffEvent_diff_WithGap08);
    // else if (SampleIndex == 9)
    //   FillBootstrap<9>(cent, ptSum_Gap08, weffEvent_WithinGap08, sum_pt_wSquare_WithinGap08, sum_ptSquare_wSquare_WithinGap08, WeffEvent_diff_WithGap08);
